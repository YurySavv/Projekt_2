# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'total_comander.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3 as sl
from functools import partial
from PyQt5 import QtCore, QtGui, QtWidgets
from edo import gen_edo

con = sl.connect('inventory_management.db')

label_dict = {'Продажа': ['Наименование', 'Количество', 'Цена за ед.', 'Стоимость', 'Покупатель',
                          'Склад'],
              'Приемка_товара': ['Наименование', 'Количество', 'Цена за ед.', 'Стоимость', 'Поставщик',
                                 'Склад'],
              'Перемещение': ['Наименование', 'Количество', 'Цена за ед.', 'Стоимость', 'Склад приемник',
                              'Склад отправитель'],
              'Списание_товара': ['Наименование', 'Количество', 'Цена за ед.', 'Стоимость', 'Причина списания',
                                  'Склад']}

d1 = {
    'Продажа': [['QComboBox', 'name', 'Products', 'currentText()'],
                ['QSpinBox', '', '', 'value()'],
                ['QTextEdit', '', '', 'toPlainText()'],
                ['QTextEdit', '', '', 'toPlainText()'],
                ['QComboBox', 'name', 'Customers', 'currentText()'],
                ['QComboBox', 'name', 'Warehouses', 'currentText()']],
    'Приемка_товара': [['QComboBox', 'name', 'Products', 'currentText()'],
                       ['QSpinBox', '', '', 'value()'],
                       ['QTextEdit', '', '', 'toPlainText()'],
                       ['QTextEdit', '', '', 'toPlainText()'],
                       ['QComboBox', 'name', 'Suppliers', 'currentText()'],
                       ['QComboBox', 'name', 'Warehouses', 'currentText()']],
    'Перемещение': [['QComboBox', 'name', 'Products', 'currentText()'],
                    ['QSpinBox', '', '', 'value()'],
                    ['QTextEdit', '', '', 'toPlainText()'],
                    ['QTextEdit', '', '', 'toPlainText()'],
                    ['QComboBox', 'name', 'Warehouses', 'currentText()'],
                    ['QComboBox', 'name', 'Warehouses', 'currentText()']],
    'Списание_товара': [['QComboBox', 'name', 'Products', 'currentText()'],
                        ['QSpinBox', '', '', 'value()'],
                        ['QTextEdit', '', '', 'toPlainText()'],
                        ['QTextEdit', '', '', 'toPlainText()'],
                        ['QTextEdit', '', '', 'toPlainText()'],
                        ['QComboBox', 'name', 'Warehouses', 'currentText()']],
}

dict_coord = {0: [[70, 20, 100, 40], [70, 50, 201, 22]],
              1: [[70, 90, 100, 13], [70, 120, 201, 22]],
              2: [[70, 150, 100, 13], [70, 170, 201, 22]],
              3: [[70, 200, 100, 13], [70, 220, 201, 22]],
              4: [[70, 240, 100, 13], [70, 260, 201, 22]],
              5: [[70, 290, 100, 13], [70, 320, 201, 22]]}


class Ui_Dialog(object):
    table_name = 'Списание_товара'
    list_rows =[]

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(900, 600)
        for x1 in dict_coord.keys():
            a = f"""
self.QLabel_{x1} = QtWidgets.QLabel(Dialog)
self.QLabel_{x1}.setGeometry(QtCore.QRect({dict_coord[x1][0][0]},{dict_coord[x1][0][1]},{dict_coord[x1][0][2]},{dict_coord[x1][0][3]}))

self.QLabel_{x1}.setObjectName("label_{x1}")
"""
            exec(a)

        a = d1[self.table_name]
        for x in range(len(a)):
            widg5 = f"""
self.{d1[self.table_name][x][0]}_{x} = QtWidgets.{d1[self.table_name][x][0]}(Dialog)
self.{d1[self.table_name][x][0]}_{x} .setGeometry(QtCore.QRect({dict_coord[x][1][0]},{dict_coord[x][1][1]},{dict_coord[x][1][2]},{dict_coord[x][1][3]}))
self.{d1[self.table_name][x][0]}_{x} .setObjectName("{d1[self.table_name][x][0]}_{x} ")
with con:
    try:        
        data = con.execute(f'SELECT {d1[self.table_name][x][1]} FROM {d1[self.table_name][x][2]}')
        self.{d1[self.table_name][x][0]}_{x}.addItem(str(""))
        for y in data.fetchall():
            self.{d1[self.table_name][x][0]}_{x}.addItem(str(y[0]))
    except:
        pass

        """
            exec(widg5)
        self.QComboBox_5.clear()
        self.QComboBox_0.currentTextChanged.connect(self.price)
        self.QSpinBox_1.valueChanged.connect(self.total_price)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(120, 440, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(490, 440, 150, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(340, 440, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(340, 40, 500, 311))
        self.tableWidget.setObjectName("tableWidget")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", self.table_name))
        for x2 in range(len(label_dict[self.table_name])):
            a1 = f""" 
self.QLabel_{x2}.setText(_translate("Dialog", label_dict[self.table_name][{x2}]))"""
            exec(a1)
        self.pushButton.setText(_translate("Dialog", "Добавить"))
        self.pushButton.clicked.connect(self.add_row)
        self.pushButton_2.setText(_translate("Dialog", "Создать документ"))
        self.pushButton_2.clicked.connect(self.add_edo)
        self.pushButton_3.setText(_translate("Dialog", "Удалить"))
        self.pushButton_3.clicked.connect(self.sql_del)

    def add_edo(self):
        try:
            gen_edo(self.table_name, self.list_rows, 6)
        except:
            pass


    def sql_del(self): # удаление строки из таблицы
        row = self.tableWidget.currentRow()
        if self.table_name == 'Приемка_товара':
            with con:
                warehous_id = con.execute(f'SELECT id FROM Warehouses WHERE name ="{self.list_rows[row][5]}"').fetchone()[0]
                con.execute(
                    f'UPDATE StockBalances SET quantity = quantity-{self.list_rows[row][1]} WHERE warehouse_id = {warehous_id}')
        else:
            with con:
                warehous_id = con.execute(f'SELECT id FROM Warehouses WHERE name ="{self.list_rows[row][5]}"').fetchone()[0]
                con.execute(f'UPDATE StockBalances SET quantity = quantity+{self.list_rows[row][1]} WHERE warehouse_id = {warehous_id}')
        self.list_rows.pop(row)
        if row > -1:
            self.tableWidget.removeRow(row)
            self.tableWidget.selectionModel().clearCurrentIndex()

    def add_row(self):  # генерация таблицы
        list_data = []
        for ik in range(len(d1[self.table_name])):
            a1 = f"""
self.{d1[self.table_name][ik][0]}_{ik}.{d1[self.table_name][ik][3]}
"""

            c1 = eval(a1)
            list_data.append(c1)
        self.list_rows.insert(0, list_data)  # список для создания документов
        list_data = [list_data]
        if self.table_name == 'Приемка_товара':
            with con:
                warehous_id = con.execute(f'SELECT id FROM Warehouses WHERE name ="{list_data[0][5]}"').fetchone()[0]
                con.execute(f'UPDATE StockBalances SET quantity = quantity+{list_data[0][1]} WHERE warehouse_id = {warehous_id}')
        else:
            with con:
                warehous_id = con.execute(f'SELECT id FROM Warehouses WHERE name ="{list_data[0][5]}"').fetchone()[0]
                con.execute(f'UPDATE StockBalances SET quantity = quantity-{list_data[0][1]} WHERE warehouse_id = {warehous_id}')
        self.tableWidget.setColumnCount(len(label_dict[self.table_name]))
        for row in range(len(list_data)):  # генерация таблицы
            self.tableWidget.insertRow(row)
            self.row = row
            for column in range(len(list_data[row])):
                item = QtWidgets.QTableWidgetItem(str(list_data[row][column]))
                self.tableWidget.setItem(row, column, item)

        # sql запросы не забудь

    def price(self, value):  # метод выставления цены от товара
        self.QComboBox_5.clear()
        with con:
            price = con.execute(f'''SELECT price FROM PriceDiscounts INNER JOIN Products ON PriceDiscounts.product_id 
            = Products.id WHERE Products.name ="{value}"''').fetchone()[0]
            self.QTextEdit_2.setText(str(price))
            if self.table_name == 'Приемка_товара':
                warehouses = con.execute(f"""SELECT Warehouses.name FROM Warehouses""").fetchall()
                for warehous in warehouses:
                    self.QComboBox_5.addItem(str(warehous[0]))
            else:
                max_quant = con.execute(f"""SELECT quantity FROM StockBalances INNER JOIN Products ON 
                StockBalances.product_id = Products.id WHERE Products.name ='{value}'""").fetchone()[0]

                warehouses = con.execute(f"""SELECT Warehouses.name FROM Warehouses INNER JOIN StockBalances ON 
                StockBalances.warehouse_id = Warehouses.id INNER JOIN Products ON StockBalances.product_id = 
                Products.id WHERE Products.name = '{value}'""").fetchall()
                for warehous in warehouses:
                    self.QComboBox_5.addItem(str(warehous[0]))
                self.QSpinBox_1.setMaximum(max_quant)

    def total_price(self, value): # метод выставления стоимости
        price = float(self.QTextEdit_2.toPlainText())
        self.QTextEdit_3.setText(str(price * value))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
